<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<TrustFrameworkPolicy
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06"
    PolicySchemaVersion="0.3.0.0"
    TenantId="samplemwb2ctenant.onmicrosoft.com"
    PolicyId="B2C_1A_ContosoCustomPolicyNew"
    PublicPolicyUri="http://samplemwb2ctenant.onmicrosoft.com/B2C_1A_ContosoCustomPolicyNew">

    <BuildingBlocks>

        <ClaimsSchema>

            <ClaimType Id="objectId">
                <DisplayName>unique object Id for subject of the claims being returned</DisplayName>
                <DataType>string</DataType>
            </ClaimType>

            <ClaimType Id="message">
                <DisplayName>Will hold Hello World message</DisplayName>
                <DataType>string</DataType>
            </ClaimType>

            <ClaimType Id="givenName">
                <DisplayName>Given Name</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Your given name (also known as first name).</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="surname">
                <DisplayName>Surname</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Your surname (also known as family name or last name).</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="displayName">
                <DisplayName>Display Name</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Your display name.</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="accountType">
                <DisplayName>Account Type</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>The type of account used by the user</UserHelpText>
                <UserInputType>RadioSingleSelect</UserInputType>
                <Restriction>
                    <Enumeration Text="Contoso Employee Account" Value="work" SelectByDefault="true" />
                    <Enumeration Text="Personal Account" Value="personal" SelectByDefault="false" />
                </Restriction>
            </ClaimType>

            <ClaimType Id="email">
                <DisplayName>Email Address</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="email" />
                </DefaultPartnerClaimTypes>
                <UserHelpText>Your email address. </UserHelpText>
                <UserInputType>TextBox</UserInputType>
                <Restriction>
                    <Pattern
                        RegularExpression="^[a-zA-Z0-9.!#$%&amp;&apos;^_`{}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$"
                        HelpText="Please enter a valid email address something like maurice@contoso.com" />
                </Restriction>
            </ClaimType>

            <ClaimType Id="password">
                <DisplayName>Password</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Enter password</AdminHelpText>
                <UserHelpText>Enter password</UserHelpText>
                <UserInputType>Password</UserInputType>
                <PredicateValidationReference Id="StrongPassword" />
            </ClaimType>

            <ClaimType Id="reenterPassword">
                <DisplayName>Confirm new password</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Confirm new password</AdminHelpText>
                <UserHelpText>Reenter password</UserHelpText>
                <UserInputType>Password</UserInputType>
            </ClaimType>

            <ClaimType Id="domain">
                <DataType>string</DataType>
            </ClaimType>

            <ClaimType Id="domainStatus">
                <DataType>string</DataType>
            </ClaimType>

            <ClaimType Id="accessCode">
                <DisplayName>Access Code</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Enter your invitation access code.</UserHelpText>
                <UserInputType>Password</UserInputType>
                <Restriction>
                    <Pattern RegularExpression="[0-9][0-9][0-9][0-9][0-9]"
                        HelpText="Please enter your invitation access code. It's a 5-digit number, something like 95765" />
                </Restriction>
            </ClaimType>

            <ClaimType Id="isValidAccessCode">
                <DataType>boolean</DataType>
            </ClaimType>

            <ClaimType Id="userPrincipalName">
                <DisplayName>UserPrincipalName</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Your user name as stored in the Azure Active Directory.</UserHelpText>
            </ClaimType>

            <ClaimType Id="passwordPolicies">
                <DisplayName>Password Policies</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Password policies used by Azure AD to determine password strength, expiry etc.</UserHelpText>
            </ClaimType>

            <ClaimType Id="verificationCode">
                <DisplayName>Verification Code</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Enter your verification code</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="grant_type">
                <DisplayName>grant_type</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Special parameter passed for local account authentication to login.microsoftonline.com.</UserHelpText>
            </ClaimType>

            <ClaimType Id="scope">
                <DisplayName>scope</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Special parameter passed for local account authentication to login.microsoftonline.com.</UserHelpText>
            </ClaimType>

            <ClaimType Id="nca">
                <DisplayName>nca</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Special parameter passed for local account authentication to login.microsoftonline.com.</UserHelpText>
            </ClaimType>

            <ClaimType Id="client_id">
                <DisplayName>client_id</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
                <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
            </ClaimType>

            <ClaimType Id="resource_id">
                <DisplayName>resource_id</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
                <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
            </ClaimType>

            <ClaimType Id="issuerUserId">
                <DisplayName>Username</DisplayName>
                <DataType>string</DataType>
                <UserHelpText />
                <UserInputType>TextBox</UserInputType>
                <Restriction>
                    <Pattern RegularExpression="^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$"
                        HelpText="The username you provided is not valid. It must begin with an alphabet or number and can contain alphabets, numbers and the following symbols: _ -" />
                </Restriction>
            </ClaimType>

            <ClaimType Id="identityProvider">
                <DisplayName>Identity Provider</DisplayName>
                <DataType>string</DataType>
                <UserHelpText />
            </ClaimType>

            <ClaimType Id="authenticationSource">
                <DisplayName>AuthenticationSource</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Specifies whether the user was authenticated at Social IDP or local account.</UserHelpText>
            </ClaimType>

            <ClaimType Id="upnUserName">
                <DisplayName>UPN User Name</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>The user name for creating user principal name.</UserHelpText>
            </ClaimType>

            <ClaimType Id="alternativeSecurityId">
                <DisplayName>AlternativeSecurityId</DisplayName>
                <DataType>string</DataType>
                <UserHelpText />
            </ClaimType>

            <ClaimType Id="mailNickName">
                <DisplayName>MailNickName</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Your mail nick name as stored in the Azure Active Directory.</UserHelpText>
            </ClaimType>

            <ClaimType Id="newUser">
                <DisplayName>User is new or not</DisplayName>
                <DataType>boolean</DataType>
                <UserHelpText />
            </ClaimType>

        </ClaimsSchema>

        <Predicates>
            <Predicate Id="IsLengthBetween8And64" Method="IsLengthRange"
                HelpText="The password must be between 8 and 64 characters.">
                <Parameters>
                    <Parameter Id="Minimum">8</Parameter>
                    <Parameter Id="Maximum">64</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="Lowercase" Method="IncludesCharacters" HelpText="a lowercase letter">
                <Parameters>
                    <Parameter Id="CharacterSet">a-z</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="Uppercase" Method="IncludesCharacters" HelpText="an uppercase letter">
                <Parameters>
                    <Parameter Id="CharacterSet">A-Z</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="Number" Method="IncludesCharacters" HelpText="a digit">
                <Parameters>
                    <Parameter Id="CharacterSet">0-9</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="Symbol" Method="IncludesCharacters" HelpText="a symbol">
                <Parameters>
                    <Parameter Id="CharacterSet">@#$%^&amp;*\-_+=[]{}|\\:',.?/`~"();!</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="PIN" Method="MatchesRegex" HelpText="The password must be numbers only.">
                <Parameters>
                    <Parameter Id="RegularExpression">^[0-9]+$</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="AllowedCharacters" Method="MatchesRegex"
                HelpText="An invalid character was provided.">
                <Parameters>
                    <Parameter Id="RegularExpression">(^([0-9A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~"();! ]|(\.(?!@)))+$)|(^$)</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="DisallowedWhitespace" Method="MatchesRegex"
                HelpText="The password must not begin or end with a whitespace character.">
                <Parameters>
                    <Parameter Id="RegularExpression">(^\S.*\S$)|(^\S+$)|(^$)</Parameter>
                </Parameters>
            </Predicate>

        </Predicates>

        <PredicateValidations>
            <PredicateValidation Id="SimplePassword">
                <PredicateGroups>
                    <PredicateGroup Id="DisallowedWhitespaceGroup">
                        <PredicateReferences>
                            <PredicateReference Id="DisallowedWhitespace" />
                        </PredicateReferences>
                    </PredicateGroup>
                    <PredicateGroup Id="AllowedCharactersGroup">
                        <PredicateReferences>
                            <PredicateReference Id="AllowedCharacters" />
                        </PredicateReferences>
                    </PredicateGroup>
                    <PredicateGroup Id="LengthGroup">
                        <PredicateReferences>
                            <PredicateReference Id="IsLengthBetween8And64" />
                        </PredicateReferences>
                    </PredicateGroup>
                </PredicateGroups>
            </PredicateValidation>
            <PredicateValidation Id="StrongPassword">
                <PredicateGroups>
                    <PredicateGroup Id="DisallowedWhitespaceGroup">
                        <PredicateReferences>
                            <PredicateReference Id="DisallowedWhitespace" />
                        </PredicateReferences>
                    </PredicateGroup>
                    <PredicateGroup Id="AllowedCharactersGroup">
                        <PredicateReferences>
                            <PredicateReference Id="AllowedCharacters" />
                        </PredicateReferences>
                    </PredicateGroup>
                    <PredicateGroup Id="LengthGroup">
                        <PredicateReferences>
                            <PredicateReference Id="IsLengthBetween8And64" />
                        </PredicateReferences>
                    </PredicateGroup>
                    <PredicateGroup Id="CharacterClasses">
                        <UserHelpText>The password must have at least 3 of the following:</UserHelpText>
                        <PredicateReferences MatchAtLeast="3">
                            <PredicateReference Id="Lowercase" />
                            <PredicateReference Id="Uppercase" />
                            <PredicateReference Id="Number" />
                            <PredicateReference Id="Symbol" />
                        </PredicateReferences>
                    </PredicateGroup>
                </PredicateGroups>
            </PredicateValidation>
            <PredicateValidation Id="CustomPassword">
                <PredicateGroups>
                    <PredicateGroup Id="DisallowedWhitespaceGroup">
                        <PredicateReferences>
                            <PredicateReference Id="DisallowedWhitespace" />
                        </PredicateReferences>
                    </PredicateGroup>
                    <PredicateGroup Id="AllowedCharactersGroup">
                        <PredicateReferences>
                            <PredicateReference Id="AllowedCharacters" />
                        </PredicateReferences>
                    </PredicateGroup>
                </PredicateGroups>
            </PredicateValidation>
        </PredicateValidations>

        <ClaimsTransformations>

            <ClaimsTransformation Id="GenerateRandomObjectIdTransformation"
                TransformationMethod="CreateRandomString">
                <InputParameters>
                    <InputParameter Id="randomGeneratorType" DataType="string" Value="GUID" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="objectId"
                        TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateDisplayNameTransformation"
                TransformationMethod="FormatStringMultipleClaims">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="givenName"
                        TransformationClaimType="inputClaim1" />
                    <InputClaim ClaimTypeReferenceId="surname" TransformationClaimType="inputClaim2" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="{0} {1}" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="displayName"
                        TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateMessageTransformation"
                TransformationMethod="FormatStringClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="displayName"
                        TransformationClaimType="inputClaim" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="Hello {0}" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="message"
                        TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="GetDomainFromEmail" TransformationMethod="ParseDomain">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="emailAddress" />
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="domain" TransformationClaimType="domain" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="LookupDomain" TransformationMethod="LookupValue">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="domain"
                        TransformationClaimType="inputParameterId" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="contoso.com" DataType="string" Value="valid" />
                    <InputParameter Id="fabrikam.com" DataType="string" Value="valid" />
                    <InputParameter Id="woodgrove.com" DataType="string" Value="valid" />
                    <InputParameter Id="errorOnFailedLookup" DataType="boolean" Value="true" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="domainStatus"
                        TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CheckIfIsValidAccessCode"
                TransformationMethod="CompareClaimToValue">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="accessCode"
                        TransformationClaimType="inputClaim1" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="compareTo" DataType="string" Value="88888" />
                    <InputParameter Id="operator" DataType="string" Value="equal" />
                    <InputParameter Id="ignoreCase" DataType="string" Value="true" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="isValidAccessCode"
                        TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="ThrowIfIsNotValidAccessCode"
                TransformationMethod="AssertBooleanClaimIsEqualToValue">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="isValidAccessCode"
                        TransformationClaimType="inputClaim" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="valueToCompareTo" DataType="boolean" Value="true" />
                </InputParameters>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateRandomUPNUserName"
                TransformationMethod="CreateRandomString">
                <InputParameters>
                    <InputParameter Id="randomGeneratorType" DataType="string" Value="GUID" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="upnUserName"
                        TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateAlternativeSecurityId"
                TransformationMethod="CreateAlternativeSecurityId">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="issuerUserId" TransformationClaimType="key" />
                    <InputClaim ClaimTypeReferenceId="identityProvider"
                        TransformationClaimType="identityProvider" />
                </InputClaims>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="alternativeSecurityId"
                        TransformationClaimType="alternativeSecurityId" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateUserPrincipalName"
                TransformationMethod="FormatStringClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="upnUserName"
                        TransformationClaimType="inputClaim" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string"
                        Value="cpim_{0}@{RelyingPartyTenantId}" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="userPrincipalName"
                        TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

        </ClaimsTransformations>

        <ContentDefinitions>

            <ContentDefinition Id="SelfAssertedContentDefinition">
                <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.7</DataUri>
            </ContentDefinition>

            <ContentDefinition Id="SignupOrSigninContentDefinition">
                <LoadUri>~/tenant/templates/AzureBlue/unified.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:unifiedssp:2.1.7</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Signin and Signup</Item>
                </Metadata>
            </ContentDefinition>

            <ContentDefinition Id="socialAccountsignupContentDefinition">
                <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.7</DataUri>
                <Metadata>
                    <Item Key="DisplayName">Collect information from user page alongside those from social Idp.</Item>
                </Metadata>
            </ContentDefinition>

        </ContentDefinitions>

        <DisplayControls>
            <DisplayControl Id="emailVerificationControl"
                UserInterfaceControlType="VerificationControl">
                <DisplayClaims>
                    <DisplayClaim ClaimTypeReferenceId="email" Required="true" />
                    <DisplayClaim ClaimTypeReferenceId="verificationCode"
                        ControlClaimType="VerificationCode" Required="true" />
                </DisplayClaims>
                <OutputClaims></OutputClaims>
                <Actions>
                    <Action Id="SendCode">
                        <ValidationClaimsExchange>
                            <ValidationClaimsExchangeTechnicalProfile
                                TechnicalProfileReferenceId="AadSspr-SendCode" />
                        </ValidationClaimsExchange>
                    </Action>
                    <Action Id="VerifyCode">
                        <ValidationClaimsExchange>
                            <ValidationClaimsExchangeTechnicalProfile
                                TechnicalProfileReferenceId="AadSspr-VerifyCode" />
                        </ValidationClaimsExchange>
                    </Action>
                </Actions>
            </DisplayControl>
        </DisplayControls>

    </BuildingBlocks>

    <ClaimsProviders>

        <ClaimsProvider>
            <DisplayName>Token Issuer</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="JwtIssuer">
                    <DisplayName>JWT Issuer</DisplayName>
                    <Protocol Name="None" />
                    <OutputTokenFormat>JWT</OutputTokenFormat>
                    <Metadata>
                        <Item Key="client_id">{service:te}</Item>
                        <Item Key="issuer_refresh_token_user_identity_claim_type">objectId</Item>
                        <Item Key="SendTokenResponseBodyWithJsonNumbers">true</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
                        <Key Id="issuer_refresh_token_key"
                            StorageReferenceId="B2C_1A_TokenEncryptionKeyContainer" />
                    </CryptographicKeys>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <!-- The technical profile(s) defined in this section is required by the framework to be
            included in all custom policies. -->
            <DisplayName>Trustframework Policy Engine TechnicalProfiles</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="TpEngine_c3bd4fe2-1775-4013-b91d-35f16d377d13">
                    <DisplayName>Trustframework Policy Engine Default Technical Profile</DisplayName>
                    <Protocol Name="None" />
                    <Metadata>
                        <Item Key="url">{service:te}</Item>
                    </Metadata>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Technical Profiles to generate claims</DisplayName>
            <TechnicalProfiles>

                <TechnicalProfile Id="UserInputMessageClaimGenerator">
                    <DisplayName>User Message Claim Generator Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="message" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateMessageTransformation" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>

                <TechnicalProfile Id="UserInputDisplayNameGenerator">
                    <DisplayName>Display Name Claim Generator Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="displayName" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateDisplayNameTransformation" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Technical Profiles to collect user's details </DisplayName>
            <TechnicalProfiles>

                <TechnicalProfile Id="UserInformationCollector">
                    <DisplayName>Collect User Input Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">SelfAssertedContentDefinition</Item>
                        <Item Key="LookupNotFound">The provided email address isn't a valid Contoso Employee email.</Item>
                    </Metadata>
                    <DisplayClaims>
                        <DisplayClaim ClaimTypeReferenceId="givenName" Required="true" />
                        <DisplayClaim ClaimTypeReferenceId="surname" Required="true" />
                        <DisplayClaim DisplayControlReferenceId="emailVerificationControl" />
                        <DisplayClaim ClaimTypeReferenceId="password" Required="true" />
                        <DisplayClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
                    </DisplayClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="givenName" />
                        <OutputClaim ClaimTypeReferenceId="surname" />
                        <OutputClaim ClaimTypeReferenceId="email" />
                        <OutputClaim ClaimTypeReferenceId="password" />
                        <OutputClaim ClaimTypeReferenceId="reenterPassword" />
                    </OutputClaims>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="CheckCompanyDomain">
                            <Preconditions>
                                <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
                                    <Value>accountType</Value>
                                    <Value>work</Value>
                                    <Action>SkipThisValidationTechnicalProfile</Action>
                                </Precondition>
                            </Preconditions>
                        </ValidationTechnicalProfile>
                        <ValidationTechnicalProfile ReferenceId="UserInputDisplayNameGenerator" />
                        <ValidationTechnicalProfile ReferenceId="AAD-UserWrite" />
                    </ValidationTechnicalProfiles>
                </TechnicalProfile>

                <TechnicalProfile Id="CheckCompanyDomain">
                    <DisplayName>Check Company validity </DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <InputClaimsTransformations>
                        <InputClaimsTransformation ReferenceId="GetDomainFromEmail" />
                    </InputClaimsTransformations>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="domain" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="LookupDomain" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Technical Profiles to collect user's access code</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="AccessCodeInputCollector">
                    <DisplayName>Collect Access Code Input from user Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">SelfAssertedContentDefinition</Item>
                        <Item Key="UserMessageIfClaimsTransformationBooleanValueIsNotEqual">The access code is invalid.</Item>
                        <Item Key="ClaimTypeOnWhichToEnable">accountType</Item>
                        <Item Key="ClaimValueOnWhichToEnable">personal</Item>
                    </Metadata>
                    <DisplayClaims>
                        <DisplayClaim ClaimTypeReferenceId="accessCode" Required="true" />
                    </DisplayClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="accessCode" />
                    </OutputClaims>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="ValidateAccessCodeViaHttp" />
                    </ValidationTechnicalProfiles>
                    <EnabledForUserJourneys>OnClaimsExistence</EnabledForUserJourneys>
                </TechnicalProfile>
                <TechnicalProfile Id="CheckAccessCodeViaClaimsTransformationChecker">
                    <DisplayName>A Claims Transformations to check user's access code validity</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="isValidAccessCode" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CheckIfIsValidAccessCode" />
                        <OutputClaimsTransformation ReferenceId="ThrowIfIsNotValidAccessCode" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Technical Profile to collect user's accountType</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="AccountTypeInputCollector">
                    <DisplayName>Collect User Input Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">SelfAssertedContentDefinition</Item>
                    </Metadata>
                    <DisplayClaims>
                        <DisplayClaim ClaimTypeReferenceId="accountType" Required="true" />
                    </DisplayClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="accountType" />
                        <OutputClaim ClaimTypeReferenceId="authenticationSource"
                            DefaultValue="localIdpAuthentication" AlwaysUseDefaultValue="true" />
                    </OutputClaims>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>HTTP Request Technical Profiles</DisplayName>

            <TechnicalProfiles>
                <TechnicalProfile Id="ValidateAccessCodeViaHttp">
                    <DisplayName>Check that the user has entered a valid access code by using Claims Transformations</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="ServiceUrl">https://access-code-app-mw3-dtgqhygcbqbcadb0.polandcentral-01.azurewebsites.net/validate-accesscode</Item>
                        <Item Key="SendClaimsIn">Body</Item>
                        <Item Key="AuthenticationType">None</Item>
                        <Item Key="AllowInsecureAuthInProduction">true</Item>
                        <Item Key="DebugMode">true</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="accessCode" PartnerClaimType="accessCode" />
                    </InputClaims>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Azure AD Technical Profiles</DisplayName>
            <TechnicalProfiles>

                <TechnicalProfile Id="AAD-UserWrite">
                    <DisplayName>Write user information to AAD</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.AzureActiveDirectoryProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="Operation">Write</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
                        <Item Key="UserMessageIfClaimsPrincipalAlreadyExists">The account already exists. Try to create another account</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email"
                            PartnerClaimType="signInNames.emailAddress" Required="true" />
                    </InputClaims>
                    <PersistedClaims>
                        <PersistedClaim ClaimTypeReferenceId="email"
                            PartnerClaimType="signInNames.emailAddress" />
                        <PersistedClaim ClaimTypeReferenceId="displayName" />
                        <PersistedClaim ClaimTypeReferenceId="givenName" />
                        <PersistedClaim ClaimTypeReferenceId="surname" />
                        <PersistedClaim ClaimTypeReferenceId="password" />
                        <PersistedClaim ClaimTypeReferenceId="passwordPolicies"
                            DefaultValue="DisablePasswordExpiration,DisableStrongPassword" />
                    </PersistedClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId" />
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
                        <OutputClaim ClaimTypeReferenceId="email"
                            PartnerClaimType="signInNames.emailAddress" />
                    </OutputClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="AAD-UserRead">
                    <DisplayName>Read user from Azure AD storage</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.AzureActiveDirectoryProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="Operation">Read</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">false</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email"
                            PartnerClaimType="signInNames.emailAddress" Required="true" />
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId" />
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
                        <OutputClaim ClaimTypeReferenceId="givenName" />
                        <OutputClaim ClaimTypeReferenceId="surname" />
                        <OutputClaim ClaimTypeReferenceId="displayName" />
                    </OutputClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="AAD-UserWriteUsingAlternativeSecurityId">
                    <DisplayName>Azure Active Directory technical profile for handling social accounts</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.AzureActiveDirectoryProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />

                    <Metadata>
                        <Item Key="Operation">Write</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
                    </Metadata>

                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
                    </CryptographicKeys>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="alternativeSecurityId"
                            PartnerClaimType="alternativeSecurityId" Required="true" />
                    </InputClaims>
                    <PersistedClaims>
                        <!-- Required claims -->
                        <PersistedClaim ClaimTypeReferenceId="alternativeSecurityId" />
                        <PersistedClaim ClaimTypeReferenceId="userPrincipalName" />
                        <PersistedClaim ClaimTypeReferenceId="mailNickName" DefaultValue="unknown" />
                        <PersistedClaim ClaimTypeReferenceId="displayName" DefaultValue="unknown" />

                        <!-- Optional claims -->
                        <PersistedClaim ClaimTypeReferenceId="givenName" />
                        <PersistedClaim ClaimTypeReferenceId="surname" />
                    </PersistedClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId" />
                        <OutputClaim ClaimTypeReferenceId="newUser"
                            PartnerClaimType="newClaimsPrincipalCreated" />
                    </OutputClaims>

                </TechnicalProfile>

                <TechnicalProfile Id="AAD-UserReadUsingAlternativeSecurityId">
                    <DisplayName>Azure Active Directory</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.AzureActiveDirectoryProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="Operation">Read</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">false</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
                    </CryptographicKeys>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="alternativeSecurityId"
                            PartnerClaimType="alternativeSecurityId" Required="true" />
                    </InputClaims>
                    <OutputClaims>
                        <!-- Required claims -->
                        <OutputClaim ClaimTypeReferenceId="objectId" />

                        <!-- Optional claims -->
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
                        <OutputClaim ClaimTypeReferenceId="displayName" />
                        <OutputClaim ClaimTypeReferenceId="givenName" />
                        <OutputClaim ClaimTypeReferenceId="surname" />
                    </OutputClaims>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Azure AD self-service password reset (SSPR)</DisplayName>
            <TechnicalProfiles>

                <TechnicalProfile Id="AadSspr-SendCode">
                    <DisplayName>Send Code</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.AadSsprProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="Operation">SendCode</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="emailAddress" />
                    </InputClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="AadSspr-VerifyCode">
                    <DisplayName>Verify Code</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.AadSsprProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="Operation">VerifyCode</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="verificationCode" />
                        <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="emailAddress" />
                    </InputClaims>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>OpenID Connect Technical Profiles</DisplayName>
            <TechnicalProfiles>

                <TechnicalProfile Id="SignInUser">
                    <DisplayName>Sign in with Local Account</DisplayName>
                    <Protocol Name="OpenIdConnect" />
                    <Metadata>
                        <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">We didn't find this account</Item>
                        <Item Key="UserMessageIfInvalidPassword">Your password or username is incorrect</Item>
                        <Item Key="UserMessageIfOldPasswordUsed">You've used an old password.</Item>
                        <Item Key="ProviderName">https://sts.windows.net/</Item>
                        <Item Key="METADATA">https://login.microsoftonline.com/{tenant}/.well-known/openid-configuration</Item>
                        <Item Key="authorization_endpoint">https://login.microsoftonline.com/{tenant}/oauth2/token</Item>
                        <Item Key="response_types">id_token</Item>
                        <Item Key="response_mode">query</Item>
                        <Item Key="scope">email openid</Item>
                        <!-- Policy Engine Clients -->
                        <Item Key="UsePolicyInRedirectUri">false</Item>
                        <Item Key="HttpBinding">POST</Item>
                        <Item Key="client_id">37aa4eb3-b64e-45cc-9ae5-15c936695842</Item>
                        <Item Key="IdTokenAudience">5cd84861-6408-4a80-a807-7cdff4261e79</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="username"
                            Required="true" />
                        <InputClaim ClaimTypeReferenceId="password" PartnerClaimType="password"
                            Required="true" />
                        <InputClaim ClaimTypeReferenceId="grant_type" DefaultValue="password" />
                        <InputClaim ClaimTypeReferenceId="scope" DefaultValue="openid" />
                        <InputClaim ClaimTypeReferenceId="nca" PartnerClaimType="nca"
                            DefaultValue="1" />
                        <InputClaim ClaimTypeReferenceId="client_id"
                            DefaultValue="37aa4eb3-b64e-45cc-9ae5-15c936695842" />
                        <InputClaim ClaimTypeReferenceId="resource_id" PartnerClaimType="resource"
                            DefaultValue="5cd84861-6408-4a80-a807-7cdff4261e79" />
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="oid" />
                    </OutputClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="UserSignInCollector">
                    <DisplayName>Local Account Signin</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="setting.operatingMode">Email</Item>
                        <Item Key="SignUpTarget">AccountTypeInputCollectorClaimsExchange</Item>
                    </Metadata>
                    <DisplayClaims>
                        <DisplayClaim ClaimTypeReferenceId="email" Required="true" />
                        <DisplayClaim ClaimTypeReferenceId="password" Required="true" />
                    </DisplayClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="email" />
                        <OutputClaim ClaimTypeReferenceId="password" />
                        <OutputClaim ClaimTypeReferenceId="objectId" />
                        <OutputClaim ClaimTypeReferenceId="authenticationSource"
                            DefaultValue="localIdpAuthentication" AlwaysUseDefaultValue="true" />
                    </OutputClaims>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="SignInUser" />
                    </ValidationTechnicalProfiles>
                </TechnicalProfile>

            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <!-- The following Domain element allows this profile to be used if the request comes
            with domain_hint 
                    query string parameter, e.g. domain_hint=facebook.com  -->
            <Domain>facebook.com</Domain>
            <DisplayName>Facebook</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="Facebook-OAUTH">
                    <!-- The text in the following DisplayName element is shown to the user on the
                    claims provider 
                        selection screen. -->
                    <DisplayName>Facebook</DisplayName>
                    <Protocol Name="OAuth2" />
                    <Metadata>
                        <Item Key="ProviderName">facebook</Item>
                        <Item Key="authorization_endpoint">https://www.facebook.com/dialog/oauth</Item>
                        <Item Key="AccessTokenEndpoint">https://graph.facebook.com/oauth/access_token</Item>
                        <Item Key="HttpBinding">GET</Item>
                        <Item Key="UsePolicyInRedirectUri">0</Item>
                        <Item Key="client_id">598000402871998</Item>
                        <Item Key="scope">email public_profile</Item>
                        <Item Key="ClaimsEndpoint">https://graph.facebook.com/me?fields=id,first_name,last_name,name,email</Item>
                        <Item Key="AccessTokenResponseFormat">json</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="client_secret" StorageReferenceId="B2C_1A_FacebookSecret" />
                    </CryptographicKeys>
                    <InputClaims />
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="id" />
                        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="first_name" />
                        <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="last_name" />
                        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
                        <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" />
                        <OutputClaim ClaimTypeReferenceId="identityProvider"
                            DefaultValue="facebook.com" AlwaysUseDefaultValue="true" />
                        <OutputClaim ClaimTypeReferenceId="authenticationSource"
                            DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
                        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
                        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Self Asserted for social sign in</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="SelfAsserted-Social">
                    <DisplayName>Collect more info during social signup</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">socialAccountsignupContentDefinition</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
                    </CryptographicKeys>
                    <InputClaims>
                        <!-- These claims ensure that any values retrieved in the previous steps
                        (e.g. from an external IDP) are prefilled. 
                           Note that some of these claims may not have any value, for example, if the external IDP did not
                        provide any of
                           these values, or if the claim did not appear in the OutputClaims section of the IDP.
                           In addition, if a claim is not in the InputClaims section, but it is in the OutputClaims section,
                        then its
                           value will not be prefilled, but the user will still be prompted for it (with an empty value). -->
                        <InputClaim ClaimTypeReferenceId="displayName" />
                        <InputClaim ClaimTypeReferenceId="givenName" />
                        <InputClaim ClaimTypeReferenceId="surname" />
                    </InputClaims>
                    <!---User will be asked to input or update these values-->
                    <DisplayClaims>
                        <DisplayClaim ClaimTypeReferenceId="displayName" />
                        <DisplayClaim ClaimTypeReferenceId="givenName" />
                        <DisplayClaim ClaimTypeReferenceId="surname" />
                    </DisplayClaims>

                    <OutputClaims>
                        <!-- These claims are not shown to the user because their value is obtained
                        through the "ValidationTechnicalProfiles"
                           referenced below, or a default value is assigned to the claim. A claim is only shown to the user to
                        provide a 
                           value if its value cannot be obtained through any other means. -->
                        <OutputClaim ClaimTypeReferenceId="objectId" />
                        <OutputClaim ClaimTypeReferenceId="newUser" />
                        <!---<OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />-->

                        <!-- Optional claims. These claims are collected from the user and can be
                        modified. If a claim is to be persisted in the directory after having been 
                           collected from the user, it needs to be added as a PersistedClaim in the ValidationTechnicalProfile
                        referenced below, i.e. 
                           in AAD-UserWriteUsingAlternativeSecurityId. -->
                        <OutputClaim ClaimTypeReferenceId="displayName" />
                        <OutputClaim ClaimTypeReferenceId="givenName" />
                        <OutputClaim ClaimTypeReferenceId="surname" />
                    </OutputClaims>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile
                            ReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
                    </ValidationTechnicalProfiles>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

    </ClaimsProviders>

    <UserJourneys>

        <UserJourney Id="LocalAndSocialSignInAndSignUp">
            <OrchestrationSteps>
                <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp"
                    ContentDefinitionReferenceId="SignupOrSigninContentDefinition">
                    <ClaimsProviderSelections>
                        <ClaimsProviderSelection TargetClaimsExchangeId="FacebookExchange" />
                        <ClaimsProviderSelection
                            ValidationClaimsExchangeId="LocalAccountSigninEmailExchange" />
                    </ClaimsProviderSelections>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="LocalAccountSigninEmailExchange"
                            TechnicalProfileReferenceId="UserSignInCollector" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <!-- Check if the user has selected to sign in using one of the social providers -->
                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="FacebookExchange"
                            TechnicalProfileReferenceId="Facebook-OAUTH" />
                        <ClaimsExchange Id="AccountTypeInputCollectorClaimsExchange"
                            TechnicalProfileReferenceId="AccountTypeInputCollector" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!--For Local sign in option start-->

                <OrchestrationStep Order="3" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>accountType</Value>
                            <Value>work</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>socialIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="GetAccessCodeClaimsExchange"
                            TechnicalProfileReferenceId="AccessCodeInputCollector" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="4" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>socialIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SignUpWithLogonEmailExchange"
                            TechnicalProfileReferenceId="UserInformationCollector" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="5" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>socialIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReaderExchange"
                            TechnicalProfileReferenceId="AAD-UserRead" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <!--For Local sign in option end-->

                <!--For social sign in option start-->
                <!-- For social IDP authentication, attempt to find the user account in the
            directory. -->
                <OrchestrationStep Order="6" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>localIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId"
                            TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- Show self-asserted page only if the directory does not have the user account
            already (i.e. we do not have an objectId).  -->
                <OrchestrationStep Order="7" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>localIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-Social"
                            TechnicalProfileReferenceId="SelfAsserted-Social" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="8" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                        <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                            <Value>authenticationSource</Value>
                            <Value>localIdpAuthentication</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserWrite"
                            TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <!--For social sign in option end-->
                <OrchestrationStep Order="9" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="GetMessageClaimsExchange"
                            TechnicalProfileReferenceId="UserInputMessageClaimGenerator" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="10" Type="SendClaims"
                    CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
            </OrchestrationSteps>
        </UserJourney>

        <UserJourney Id="HelloWorldJourney">
            <OrchestrationSteps>

                <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp">
                    <ClaimsProviderSelections>
                        <ClaimsProviderSelection TargetClaimsExchangeId="FacebookExchange" />
                    </ClaimsProviderSelections>
                </OrchestrationStep>

                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="FacebookExchange"
                            TechnicalProfileReferenceId="Facebook-OAUTH" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- For social IDP authentication, attempt to find the user account in the
        directory. -->
                <OrchestrationStep Order="3" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId"
                            TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <!-- Show self-asserted page only if the directory does not have the user account
        already (i.e. we don't have an objectId).  -->
                <OrchestrationStep Order="4" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="SelfAsserted-Social"
                            TechnicalProfileReferenceId="SelfAsserted-Social" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="5" Type="ClaimsExchange">
                    <Preconditions>
                        <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                            <Value>objectId</Value>
                            <Action>SkipThisOrchestrationStep</Action>
                        </Precondition>
                    </Preconditions>
                    <ClaimsExchanges>
                        <ClaimsExchange Id="AADUserWrite"
                            TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
                    </ClaimsExchanges>
                </OrchestrationStep>
                <OrchestrationStep Order="6" Type="SendClaims"
                    CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />

            </OrchestrationSteps>
        </UserJourney>

    </UserJourneys>

    <RelyingParty>

        <!-- 
                Relying Party Here that's your policy’s entry point
                Specify the User Journey to execute 
                Specify the claims to include in the token that is returned when the policy runs
            -->
        <DefaultUserJourney ReferenceId="LocalAndSocialSignInAndSignUp" />

        <TechnicalProfile Id="HelloWorldPolicyProfile">
            <DisplayName>Hello World Policy Profile</DisplayName>
            <Protocol Name="OpenIdConnect" />
            <OutputClaims>
                <OutputClaim ClaimTypeReferenceId="displayName" />
                <OutputClaim ClaimTypeReferenceId="givenName" />
                <OutputClaim ClaimTypeReferenceId="surname" />
                <OutputClaim ClaimTypeReferenceId="email" />
                <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="sub" />
                <OutputClaim ClaimTypeR``feferenceId="identityProvider" />
            </OutputClaims>
            <SubjectNamingInfo ClaimType="sub" />
        </TechnicalProfile>

    </RelyingParty>

</TrustFrameworkPolicy>